name: Version Bump

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Type de version (major, minor, patch)'
        required: false
        default: 'auto'

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version
        id: latest_version
        run: |
          # R√©cup√©rer tous les tags tri√©s par version
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=${LATEST_TAG}" >> "$GITHUB_OUTPUT"
          echo "Current version is: ${LATEST_TAG}"

      - name: Determine version bump type
        id: bump_type
        run: |
          # D√©finir un type par d√©faut
          BUMP_TYPE="patch"
          
          if [[ "${{ github.event.inputs.version-type }}" != "auto" && "${{ github.event.inputs.version-type }}" != "" ]]; then
            BUMP_TYPE="${{ github.event.inputs.version-type }}"
          else
            COMMITS=$(git log ${{ steps.latest_version.outputs.latest_tag }}..HEAD --pretty=format:"%s")
            if echo "$COMMITS" | grep -q "^feat\!: \|^BREAKING CHANGE"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat: "; then
              BUMP_TYPE="minor"
            fi
          fi
          echo "Type de version d√©termin√©: ${BUMP_TYPE}"
          echo "bump_type=${BUMP_TYPE}" >> "$GITHUB_OUTPUT"

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION=${{ steps.latest_version.outputs.latest_tag }}
          echo "Processing version: ${CURRENT_VERSION}"
          
          # Extraire les num√©ros de version
          CURRENT_VERSION=${CURRENT_VERSION#v}
          if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version invalide, d√©but √† 0.0.0"
            MAJOR=0
            MINOR=0
            PATCH=0
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          fi
          
          # Incr√©menter la version
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          echo "Type de bump: ${BUMP_TYPE}"
          
          case "${BUMP_TYPE}" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
            *)
              echo "Type de version invalide: ${BUMP_TYPE}"
              exit 1
              ;;
          esac
          
          NEW_TAG="v${NEW_VERSION}"
          echo "New version will be: ${NEW_TAG}"
          
          # V√©rifier que la nouvelle version est plus grande que l'ancienne
          if ! echo "${CURRENT_VERSION}\n${NEW_VERSION}" | sort -V -C; then
            echo "Error: La nouvelle version doit √™tre plus grande que l'ancienne"
            exit 1
          fi
          
          echo "new_version=${NEW_TAG}" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.latest_version.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Cr√©er le contenu du changelog
          {
            echo "# Changelog"
            echo
            echo "## ${NEW_VERSION} (${DATE})"
            echo
            echo "### ‚ö°Ô∏è Nouvelles fonctionnalit√©s"
            git log ${LATEST_TAG}..HEAD --pretty=format:"* %s" --grep="^feat"
            echo
            echo "### üêõ Corrections de bugs"
            git log ${LATEST_TAG}..HEAD --pretty=format:"* %s" --grep="^fix"
            echo
            echo "### üîß Maintenance"
            git log ${LATEST_TAG}..HEAD --pretty=format:"* %s" --grep="^chore\|^docs\|^refactor"
            echo
          } > CHANGELOG.new.md
          
          # Fusionner avec l'ancien changelog s'il existe
          if [ -f CHANGELOG.md ]; then
            tail -n +2 CHANGELOG.md >> CHANGELOG.new.md
          fi
          mv CHANGELOG.new.md CHANGELOG.md
          
          # Pr√©parer le message de release
          {
            echo "## Changements dans ${NEW_VERSION}"
            echo
            echo "### ‚ö°Ô∏è Nouvelles fonctionnalit√©s"
            git log ${LATEST_TAG}..HEAD --pretty=format:"* %s" --grep="^feat"
            echo
            echo "### üêõ Corrections de bugs"
            git log ${LATEST_TAG}..HEAD --pretty=format:"* %s" --grep="^fix"
            echo
            echo "### üîß Maintenance"
            git log ${LATEST_TAG}..HEAD --pretty=format:"* %s" --grep="^chore\|^docs\|^refactor"
          } > RELEASE_NOTES.md

      - name: Commit changelog
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add CHANGELOG.md
          git commit -m "docs: mise √† jour du changelog pour ${{ steps.version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.version.outputs.new_version }}"
          
          # V√©rifier que le tag est valide
          if [[ ! $NEW_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Format de version invalide: ${NEW_TAG}"
            exit 1
          fi
          
          # V√©rifier que le tag n'existe pas d√©j√†
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Error: Le tag ${NEW_TAG} existe d√©j√†"
            exit 1
          fi
          
          echo "Cr√©ation du nouveau tag: ${NEW_TAG}"
          git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG}"
          git push origin "${NEW_TAG}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: "Release ${{ steps.version.outputs.new_version }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
