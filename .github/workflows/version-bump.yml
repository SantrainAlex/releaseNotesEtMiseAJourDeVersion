name: Version Bump

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Type de version (major, minor, patch)'
        required: false
        default: 'auto'

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version
        id: latest_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${LATEST_TAG}" >> "$GITHUB_OUTPUT"

      - name: Determine version bump type
        id: bump_type
        run: |
          if [[ "${{ github.event.inputs.version-type }}" != "auto" ]]; then
            BUMP_TYPE="${{ github.event.inputs.version-type }}"
          else
            COMMITS=$(git log ${{ steps.latest_version.outputs.latest_tag }}..HEAD --pretty=format:"%s")
            if echo "$COMMITS" | grep -q "^feat\!: \|^BREAKING CHANGE"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat: "; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          echo "bump_type=${BUMP_TYPE}" >> "$GITHUB_OUTPUT"

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION=${{ steps.latest_version.outputs.latest_tag }}
          CURRENT_VERSION=${CURRENT_VERSION#v}
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case "${{ steps.bump_type.outputs.bump_type }}" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac
          
          echo "new_version=v${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          NEW_TAG="${{ steps.version.outputs.new_version }}"
          echo "Creating new tag: ${NEW_TAG}"
          git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG}"
          git push origin "${NEW_TAG}"
