name: Version Bump

on: 
    push:
        branches:
            - 'main'
    workflow_dispatch:
        inputs:
            version-type:
                description: 'Type de version (major, minor, patch)'
                required: false
                default: 'auto'

permissions:
    contents: write
    pull-requests: write

jobs:
    version-bump:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            
            - name: Get lastest version
              id: get-latest-version
              run: |
                 LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                 echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
                 echo "Latest tag: ${LATEST_TAG}"

            - name: Determine version type
              id: bump-type
              run: |
                if [[ "${{ github.event.inputs.version-type }}" != "auto" ]]; then
                    BUMP_TYPE="${{ github.event.inputs.version-type }}"
                else
                    # Analyser les commits depuis le dernier tag
                    COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
                    
                    # Déterminer le type de bump basé sur les commits conventionnels
                    if echo "$COMMITS" | grep -q "^feat\!: \|^BREAKING CHANGE"; then
                    BUMP_TYPE="major"
                    elif echo "$COMMITS" | grep -q "^feat: "; then
                    BUMP_TYPE="minor"
                    else
                    BUMP_TYPE="patch"
                    fi
                fi
                echo "BUMP_TYPE=${BUMP_TYPE}" >> $GITHUB_ENV
                echo "Bump type: ${BUMP_TYPE}"

            - name: Calculate new version
              id: new-version
              run: |
                # Extraire la version actuelle sans le 'v'
                CURRENT_VERSION=${LATEST_TAG#v}
                
                # Séparer la version en parties
                IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
                
                # Incrémenter selon le type
                case "${BUMP_TYPE}" in
                    major)
                    NEW_VERSION="$((MAJOR + 1)).0.0"
                    ;;
                    minor)
                    NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
                    ;;
                    patch)
                    NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                    ;;
                esac
                
                echo "NEW_VERSION=v${NEW_VERSION}" >> $GITHUB_ENV
                echo "New version: v${NEW_VERSION}"

            - name: create and push tag
              run: |
                git config user.name "GitHub Action"
                git config user.email "action@github.com"
                git tag -a ${NEW_VERSION} -m "Release ${NEW_VERSION}"
                git push origin ${NEW_VERSION}
