name: Version Bump

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Type de version (major, minor, patch)'
        required: false
        default: 'auto'

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version
        id: latest_version
        run: |
          # Récupérer tous les tags triés par version
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=${LATEST_TAG}" >> "$GITHUB_OUTPUT"
          echo "Current version is: ${LATEST_TAG}"

      - name: Determine version bump type
        id: bump_type
        run: |
          if [[ "${{ github.event.inputs.version-type }}" != "auto" ]]; then
            BUMP_TYPE="${{ github.event.inputs.version-type }}"
          else
            COMMITS=$(git log ${{ steps.latest_version.outputs.latest_tag }}..HEAD --pretty=format:"%s")
            if echo "$COMMITS" | grep -q "^feat\!: \|^BREAKING CHANGE"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat: "; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          echo "bump_type=${BUMP_TYPE}" >> "$GITHUB_OUTPUT"
          echo "Bump type determined as: ${BUMP_TYPE}"

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION=${{ steps.latest_version.outputs.latest_tag }}
          echo "Processing version: ${CURRENT_VERSION}"
          
          # Extraire les numéros de version
          CURRENT_VERSION=${CURRENT_VERSION#v}
          if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version invalide, début à 0.0.0"
            MAJOR=0
            MINOR=0
            PATCH=0
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          fi
          
          # Incrémenter la version
          case "${{ steps.bump_type.outputs.bump_type }}" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
            *)
              echo "Type de version invalide"
              exit 1
              ;;
          esac
          
          NEW_TAG="v${NEW_VERSION}"
          
          # Vérifier que la nouvelle version est plus grande que l'ancienne
          if ! echo "${CURRENT_VERSION}\n${NEW_VERSION}" | sort -V -C; then
            echo "Error: La nouvelle version doit être plus grande que l'ancienne"
            exit 1
          fi
          
          echo "new_version=${NEW_TAG}" >> "$GITHUB_OUTPUT"
          echo "New version will be: ${NEW_TAG}"

      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.version.outputs.new_version }}"
          
          # Vérifier que le tag est valide
          if [[ ! $NEW_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Format de version invalide: ${NEW_TAG}"
            exit 1
          fi
          
          # Vérifier que le tag n'existe pas déjà
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Error: Le tag ${NEW_TAG} existe déjà"
            exit 1
          fi
          
          echo "Création du nouveau tag: ${NEW_TAG}"
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG}"
          git push origin "${NEW_TAG}"
